generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String?    @unique
  emailVerified  DateTime?
  hashedPassword String?
  role           UserRole[] @default([GUEST, HOST])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts       Account[]
  authenticators Authenticator[]
  bookings       Booking[]
  favorites      GuestFavorite[]

  properties     Property[]
  propertyImages PropertyImage[]

  name         Name?
  sessions     Session[]
  profileImage UserProfileImage?
  status       UserStatus?
  verifyToken  UserVerifyToken?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @id
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model UserStatus {
  id         String    @id @default(cuid())
  verified   Boolean   @default(false)
  verifiedAt DateTime?

  blocked   Boolean   @default(false)
  blockedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserVerifyToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfileImage {
  id       String @id @default(cuid())
  url      String
  fileHash String
  fileKey  String @unique
  fileName String
  fileType String
  size     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Amenity {
  id   String      @id @default(cuid())
  type AmenityType @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amenities PropertyAmenity[]
}

model Booking {
  id        String        @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  status    BookingStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guestsAmount BookingGuestsAmount?
  priceDetails BookingPriceDetail[]

  guestId String
  guest   User   @relation(fields: [guestId], references: [id], onDelete: Cascade)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model BookingGuestsAmount {
  id       String @id @default(cuid())
  adults   Int?
  children Int?
  infants  Int?
  pets     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model BookingPriceDetail {
  id    String     @id @default(cuid())
  type  PriceType?
  price Float      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model GuestFavorite {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guestId String
  guest   User   @relation(fields: [guestId], references: [id], onDelete: Cascade)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Name {
  id         String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id                       String  @id @default(cuid())
  title                    String?
  description              String?
  neighbourhoodDescription String?
  structure                String?
  privacyType              String?

  status PropertyStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings       Booking[]
  guestFavorites GuestFavorite[]

  hostId String
  host   User   @relation(fields: [hostId], references: [id], onDelete: Cascade)

  amenities    PropertyAmenity[]
  floorPlan    PropertyFloorPlan?
  guestsAmount PropertyGuestsAmount?
  images       PropertyImage[]
  location     PropertyLocation?
  priceDetails PropertyPriceDetail[]
}

model PropertyAmenity {
  id      String       @id @default(cuid())
  type    AmenityType?
  amenity Amenity?     @relation(fields: [type], references: [type], onDelete: Cascade)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyFloorPlan {
  id          String @id @default(cuid())
  rooms       Int?
  bathrooms   Int?
  bedrooms    Int?
  beds        Int?
  livingRooms Int?
  kitchens    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyGuestsAmount {
  id        String @id @default(cuid())
  maxGuests Int?
  adults    Int?
  children  Int?
  infants   Int?
  pets      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyImage {
  id       String    @id @default(cuid())
  fileHash String
  fileKey  String    @unique
  fileName String
  fileType String
  isMain   Boolean   @default(false)
  size     Int
  url      String
  roomType RoomType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostId String?
  host   User?   @relation(fields: [hostId], references: [id], onDelete: Cascade)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLocation {
  id             String  @id @default(cuid())
  country        String
  province       String
  city           String
  streetName     String
  houseNumber    String
  postalCode     String
  latitude       Float
  longitude      Float
  aptInfo        String?
  additionalInfo String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyPriceDetail {
  id    String     @id @default(cuid())
  type  PriceType?
  price Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum UserRole {
  GUEST
  HOST
  ADMIN
}

enum PriceType {
  HIGH_SEASON
  MID_SEASON
  LOW_SEASON
  CLEANING_FEE
  DEPOSIT
}

enum RoomType {
  BATHROOM
  BEDROOM
  LIVING_ROOM
  DINING_ROOM
  KITCHEN
  OFFICE
  GARAGE
  HALLWAY
  FRONT_PORCH
  BACK_PORCH
  BALCONY
  ATTIC
  SHED
  FRONT_YARD
  BACK_YARD
  PATIO
  GARDEN
  POOL
  HOT_TUB
  SAUNA
  GYM
  STUDIO
  STUDIO_LOFT
  OTHER
}

enum AmenityType {
  WIFI
  SWIMMING_POOL
  HOT_TUB
  TENNIS_COURT
  GYM
  AIR_CONDITIONING
  HEATING
  KITCHEN
  WASHER
  DRYER
  TV
  FREE_PARKING
  SEA_VIEW
  MOUNTAIN_VIEW
  GARDEN
  BBQ_GRILL
  PLAYGROUND
  BEACH_ACCESS
  FIREPLACE
  WORKSPACE
  PET_FRIENDLY
  SECURITY_SYSTEM
  FIRST_AID_KIT
  FIRE_EXTINGUISHER
  SMOKE_ALARM
  ELEVATOR
  BALCONY
  BREAKFAST_INCLUDED
  DISHWASHER
  BABY_EQUIPMENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PropertyStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
}

// This is your Prisma schema file for PostgreSQL/Supabase
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  name           Name?
  email          String?           @unique
  hashedPassword String?
  profileImage   UserProfileImage?
  role           UserRole[]        @default([GUEST, HOST])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  listings      Listing[]
  reservations  Reservation[]
  listingImages ListingImage[]
  favorites     GuestFavorite[]
  verifyToken   UserVerifyToken?
  resetToken    UserResetToken?
  status        UserStatus?
}

model UserStatus {
  id String @id @default(uuid())

  verified   Boolean   @default(false)
  verifiedAt DateTime? @default(now())

  blocked   Boolean   @default(false)
  blockedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserVerifyToken {
  id      String    @id @default(uuid())
  token   String?   @unique
  expires DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserResetToken {
  id      String    @id @default(uuid())
  token   String?   @unique
  expires DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfileImage {
  id        String   @id @default(uuid())
  url       String
  fileHash  String
  fileKey   String   @unique
  fileName  String
  fileType  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  GUEST
  HOST
  ADMIN
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                       String        @id @default(uuid())
  title                    String?
  description              String?
  neighbourhoodDescription String?
  structure                String?
  privacyType              String?
  status                   ListingStatus @default(DRAFT)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations   Reservation[]
  location       ListingLocation?
  floorPlan      ListingFloorPlan?
  images         ListingImage[]
  amenities      ListingAmenity[]
  priceDetails   ListingPriceDetail[]
  guestsAmount   ListingGuestsAmount?
  guestFavorites GuestFavorite[]
}

enum ListingStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
}

model ListingLocation {
  id             String   @id @default(uuid())
  country        String
  province       String
  city           String
  streetName     String
  houseNumber    String
  postalCode     String
  latitude       Float
  longitude      Float
  aptInfo        String?
  additionalInfo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ListingFloorPlan {
  id          String   @id @default(uuid())
  rooms       Int?
  bathrooms   Int?
  bedrooms    Int?
  beds        Int?
  livingRooms Int?
  kitchens    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ListingGuestsAmount {
  id        String   @id @default(uuid())
  maxGuests Int?
  adults    Int?
  children  Int?
  infants   Int?
  pets      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ListingImage {
  id       String    @id @default(uuid())
  fileHash String
  fileKey  String    @unique
  fileName String
  fileType String
  isMain   Boolean   @default(false)
  size     Int
  url      String
  roomType RoomType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  user   User?
  userId String?
}

model ListingAmenity {
  id String @id @default(uuid())

  type      AmenityType?
  amenity   Amenity?     @relation(fields: [type], references: [type], onDelete: Cascade)
  listing   Listing?     @relation(fields: [listingId], references: [id])
  listingId String?
}

model ListingPriceDetail {
  id        String     @id @default(uuid())
  type      PriceType?
  price     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  listing   Listing?   @relation(fields: [listingId], references: [id])
  listingId String?
}

enum PriceType {
  HIGH_SEASON
  MID_SEASON
  LOW_SEASON
  CLEANING_FEE
  DEPOSIT
}

model Room {
  id           String         @id @default(uuid())
  type         RoomType       @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ListingImage ListingImage[]
}

enum RoomType {
  BATHROOM
  BEDROOM
  LIVING_ROOM
  DINING_ROOM
  KITCHEN
  OFFICE
  GARAGE
  HALLWAY
  FRONT_PORCH
  BACK_PORCH
  BALCONY
  ATTIC
  SHED
  FRONT_YARD
  BACK_YARD
  PATIO
  GARDEN
  POOL
  HOT_TUB
  SAUNA
  GYM
  STUDIO
  STUDIO_LOFT
  OTHER
}

model Amenity {
  id             String           @id @default(uuid())
  type           AmenityType      @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  listingAmenity ListingAmenity[]
}

enum AmenityType {
  WIFI
  SWIMMING_POOL
  HOT_TUB
  TENNIS_COURT
  GYM
  AIR_CONDITIONING
  HEATING
  KITCHEN
  WASHER
  DRYER
  TV
  FREE_PARKING
  SEA_VIEW
  MOUNTAIN_VIEW
  GARDEN
  BBQ_GRILL
  PLAYGROUND
  BEACH_ACCESS
  FIREPLACE
  WORKSPACE
  PET_FRIENDLY
  SECURITY_SYSTEM
  FIRST_AID_KIT
  FIRE_EXTINGUISHER
  SMOKE_ALARM
  ELEVATOR
  BALCONY
  BREAKFAST_INCLUDED
  DISHWASHER
  BABY_EQUIPMENT
}

model Reservation {
  id           String                   @id @default(uuid())
  userId       String
  listingId    String
  startDate    DateTime
  endDate      DateTime
  priceDetails ReservationPriceDetail[]
  guestsAmount ReservationGuestsAmount?
  status       ReservationStatus        @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ReservationGuestsAmount {
  id        String   @id @default(uuid())
  adults    Int?
  children  Int?
  infants   Int?
  pets      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservationId String      @unique
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model ReservationPriceDetail {
  id    String     @id @default(uuid())
  type  PriceType?
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model GuestFavorite {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Name {
  id         String  @id @default(uuid())
  firstName  String
  middleName String?
  lastName   String
  userId     String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
